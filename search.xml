<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop3.2.0伪分布式系统搭建</title>
      <link href="/2019/03/17/hadoop3-2-0-wei-fen-bu-shi-xi-tong-da-jian/"/>
      <url>/2019/03/17/hadoop3-2-0-wei-fen-bu-shi-xi-tong-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><ul><li>本文基于Ubuntu16.04和Hadoop3.2.0从零搭建单机伪分布式系统，并成功运行Hadoop官方wordcount示例。<a id="more"></a></li></ul><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><hr><ul><li>腾讯云标准型S2-Ubuntu Server 16.04.1 LTS 64位</li></ul><h2 id="前置环境搭建"><a href="#前置环境搭建" class="headerlink" title="前置环境搭建"></a>前置环境搭建</h2><hr><h3 id="搭建Java-SE-Development-Kit环境"><a href="#搭建Java-SE-Development-Kit环境" class="headerlink" title="搭建Java SE Development Kit环境"></a>搭建Java SE Development Kit环境</h3><hr><h4 id="下载Java-SE-Development-Kit"><a href="#下载Java-SE-Development-Kit" class="headerlink" title="下载Java SE Development Kit"></a>下载Java SE Development Kit</h4><ul><li>官网下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java SE Development Kit 8 Downloads</a></li><li>本文下载版本：jdk-8u201-linux-x64.tar.gz</li></ul><h4 id="安装Java-SE-Development-Kit"><a href="#安装Java-SE-Development-Kit" class="headerlink" title="安装Java SE Development Kit"></a>安装Java SE Development Kit</h4><ul><li>解压jdk-8u201-linux-x64.tar.gz并移动文件夹<pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> /usr/lib/jvm$ <span class="token function">tar</span> -zxvf jdk-8u201-linux-x64.tar.gz -C /usr/lib/jvm</code></pre></li><li>编辑.bashrc，添加环境变量<pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/lib/jvm/jdk1.8.0_201<span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token punctuation">{</span>JAVA_HOME<span class="token punctuation">}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">$PATH</span></code></pre></li><li><p>测试java环境配置</p><pre class=" language-bash"><code class="language-bash">$ java -versionjava version <span class="token string">"1.8.0_201"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_201-b09<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.201-b09, mixed mode<span class="token punctuation">)</span></code></pre></li></ul><h2 id="搭建Hadoop环境"><a href="#搭建Hadoop环境" class="headerlink" title="搭建Hadoop环境"></a>搭建Hadoop环境</h2><hr><h3 id="下载Apache-Hadoop"><a href="#下载Apache-Hadoop" class="headerlink" title="下载Apache Hadoop"></a>下载Apache Hadoop</h3><ul><li>官网下载地址：<a href="https://hadoop.apache.org/releases.html" target="_blank" rel="noopener">Apache Hadoop</a></li><li>本文下载版本(from tuna)：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz" target="_blank" rel="noopener">hadoop-3.2.0.tar.gz</a></li></ul><h3 id="安装Apache-Hadoop"><a href="#安装Apache-Hadoop" class="headerlink" title="安装Apache Hadoop"></a>安装Apache Hadoop</h3><ul><li>解压hadoop-3.2.0.tar.gz，移动并进入文件夹<pre class=" language-bash"><code class="language-bash"> $ <span class="token function">mkdir</span> /usr/local/hadoop $ <span class="token function">tar</span> -zxvf hadoop-3.2.0.tar.gz -C /usr/local/hadoop $ <span class="token function">cd</span> /usr/local/hadoop/hadoop-3.2.0</code></pre></li><li>配置Hadoop内部环境变量<ul><li>编辑 etc/hadoop/hadoop-env.sh<pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/lib/jvm/jdk1.8.0_201<span class="token comment" spellcheck="true"># set to the root of your Java installation</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/lib/jvm/jdk1.8.0_201</code></pre></li><li>测试环境配置<pre class=" language-bash"><code class="language-bash">$ bin/hadoop versionHadoop 3.2.0Source code repository https://github.com/apache/hadoop.git -r e97acb3bd8f3befd27418996fa5d4b50bf2e17bfCompiled by sunilg on 2019-01-08T06:08ZCompiled with protoc 2.5.0From <span class="token function">source</span> with checksum d3f0795ed0d9dc378e2c785d3668f39This <span class="token function">command</span> was run using /usr/local/hadoop/hadoop-3.2.0/share/hadoop/common/hadoop-common-3.2.0.jar</code></pre></li></ul></li></ul><ul><li>编辑.bashrc，添加环境变量<pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/usr/local/hadoop/hadoop-3.2.0<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin:<span class="token variable">$PATH</span></code></pre></li><li>配置 etc/hadoop/core-site.xml<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://localhost:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li>配置 etc/hadoop/hdfs-site.xml<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="测试运行Hadoop"><a href="#测试运行Hadoop" class="headerlink" title="测试运行Hadoop"></a>测试运行Hadoop</h2><hr><ul><li>格式化namenode<pre class=" language-bash"><code class="language-bash">$ bin/hdfs namenode -format</code></pre></li><li>启动namenode和datanode<pre class=" language-bash"><code class="language-bash">$ sbin/start-dfs.sh</code></pre></li><li><p>此时可以通过浏览器访问namenode</p><ul><li><a href="http://localhost:9870/" target="_blank" rel="noopener">http://localhost:9870/</a></li><li>CVM请注意打开9870端口*</li></ul></li><li><p>上传本机文件到HDFS（<a href="https://www.cnblogs.com/m-study/p/8343169.html" target="_blank" rel="noopener">HDFS常用命令</a>） </p><pre class=" language-bash"><code class="language-bash">$ bin/hdfs dfs -mkdir input$ bin/hdfs dfs -put /home/input.txt input</code></pre></li><li>运行官方示例wordcount<pre><code>$ hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.0.jar wordcount  /input/input.txt  /output</code></pre></li><li>查看结果<pre class=" language-bash"><code class="language-bash">$ bin/hdfs dfs -cat output/*</code></pre></li><li>停止namenode和datanode<pre class=" language-bash"><code class="language-bash">$ sbin/stop-dfs.sh</code></pre></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><hr><ul><li><a href="https://yq.aliyun.com/articles/679496" target="_blank" rel="noopener">Hadoop 3.1.1伪分布式模式安装</a></li><li>黄宜华. 深入理解大数据:大数据处理与编程实践. 机械工业出版社, 2014.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仙人掌图专题</title>
      <link href="/2018/11/03/xian-ren-zhang-tu-zhuan-ti/"/>
      <url>/2018/11/03/xian-ren-zhang-tu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><ul><li>本文基本转载，极少原创，转载来源见Reference</li></ul><a id="more"></a><h2 id="DFS树"><a href="#DFS树" class="headerlink" title="DFS树"></a>DFS树</h2><ul><li><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>仙人掌图：每条边至多在一个环上的图。</p><p>仙人掌图中每个环相当于一个点双连通分量，那么用Tarjan算法处理dfs树。</p><p>对于树边$(low[y]&gt;fn[x])$直接处理，环边先忽略。</p><p>每个环只在其深度最小的点$x$处理，设深度最大的点为$y$，则找到$(x,y)$并进行处理$(fa[y] \neq x \ and\ dfn[y]&gt;dfn[x])$。</p></li><li><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1023" target="_blank" rel="noopener">[SHOI2008]cactus仙人掌图</a> </p><blockquote><p>给定仙人掌图（每条边至多在一个简单环上），求直径（最长的点对最短路径）。$n\leq 50000,m\leq {10}^{7}$。</p></blockquote><p>  对仙人掌建立DFS树，参考无向图的点双连通分量Tarjan算法，在访问$x$时容易知道边$(x,y)$是否属于一个环。</p><p>  设$f[x]$表示$x$点向下延伸的最长链长度，对于不在环上的边$(x,y)$，有$f[x]=\max \lbrace f[y]+1 \rbrace $。统计直径可以在访问每个$y$时进行$ans=\max \lbrace ans,f[x]+f[y]+1\rbrace $从而完成子树$x$对答案的贡献。</p><p>  对于一个环，只在其DFS树中深度最小的点进行处理（其它点直接忽略环边的存在），假设当前这个点为$x$，其与深度最大的点$y$的连边为$(x,y)$。（这条边只要满足$(fa[y] \neq x \ and\ dfn[y]&gt;dfn[x])$就可以找到）</p><p>  假设这个环有$cnt$个点，在环上只有距离$&lt;=\frac{cnt}{2}$的点对可以贡献答案。我们只需要维护每个点和其前面半圈的点构成的点对中的最大值，这可以用单调队列维护。</p><p>  但这样的话，前半圈的点与前面的点对会少考虑一部分，所以将环延伸半圈，即维护一圈半的点。最后记得枚举整个环更新$f[x]$。</p><p>  复杂度$O(m)$。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cctype></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>s<span class="token operator">=</span>s<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token operator">*</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">,</span>maxm<span class="token operator">=</span><span class="token number">20000010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>from<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> first<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token punctuation">,</span>fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>dfsnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token operator">=</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>B<span class="token punctuation">;</span>i<span class="token operator">!=</span>A<span class="token punctuation">;</span>i<span class="token operator">=</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>cnt<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token operator">+</span><span class="token punctuation">(</span>cnt<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tail<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token operator">+</span><span class="token punctuation">(</span>cnt<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">&lt;</span>tail<span class="token operator">&amp;&amp;</span>i<span class="token operator">-</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">></span>cnt<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>head<span class="token operator">++</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">-</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;</span>tail<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token operator">>=</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tail<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>q<span class="token punctuation">[</span>tail<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tail<span class="token operator">--</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>cnt<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> father<span class="token punctuation">)</span><span class="token punctuation">{</span>    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>dfsnum<span class="token punctuation">;</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">!=</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">!=</span>father<span class="token operator">&amp;&amp;</span>fa<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token operator">&amp;&amp;</span>dfn<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            u<span class="token operator">=</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4316" target="_blank" rel="noopener">小C的独立集</a></p><blockquote><p>给定仙人掌图，求最大独立集（选择最大的点集使得点间无连边）。$n\leq 50000,m\leq 60000$。<br>  对仙人掌进行无向图的点双连通分量Tarjan算法，树边正常DP，环边$(low[y]\leq dfn[x])$无视。每个环在其深度最小的点整体处理（找到$(u,v)$只须$fa[v]≠u\ and\ dfn[y]&gt;dfn[x]$）。</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cctype></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>s<span class="token operator">=</span>s<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token operator">*</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>from<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>first<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dfsnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token operator">=</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">;</span>i<span class="token operator">!=</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">=</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">;</span>i<span class="token operator">!=</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">=</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> father<span class="token punctuation">)</span><span class="token punctuation">{</span>    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>dfsnum<span class="token punctuation">;</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token operator">&amp;&amp;</span>dfn<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h2></li><li><h4 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h4><p>  原图每个点都是圆点，非环边直接相连。对于每个环，新建一个方点连接这个环的所有圆点（环边不连）。</p><p>  建图方法同DFS树，在处理环的时候连接方点。取出一个环只要取出方点的所有邻点即可（按顺序）。</p></li><li><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2125" target="_blank" rel="noopener">最短路</a></p><blockquote><p>给定$n$个人的$a_i$和$b_i$，表示第$i$个人能力值为$a_i$且不能和$b_i$同时选择，求能力值和最大的选择方案。$n \leq 10^6$。</p></blockquote><p>树上的两点间最短路问题，常用倍增求LCA解决，考虑扩展到仙人掌图。</p><p>先对仙人掌图建圆方树，圆圆边和原图边权一致。对于每个方点代表的环，记深度最小的点为$x$，则圆方边的边权是圆点到$x$的最短距离。</p><p>若$lca(u,v)$为圆点，则两点间最短路转化为圆方树上$dis[u]+dis[v]-2*dis[lca]$。（向上延伸的路径，经过环则必然经过每个方点的$x$，计算无误）</p><p>若$lca(u,v)$为方点，则记$u,v$在方点连接的圆点$A,B$的子树内，那么两点间最短路为$dis[u]+dis[v]-dis[A]-dis[B]+dis(A,B)$，$dis(A,B)$是$A,B$在环上的短侧路径。</p><p>复杂度$O(Q\log n)$。</p><p>实现细节：</p><p>1.Tarjan：建圆方树（先处理树边，最后在深度最小处处理环）</p><p>2.处理方点：$s[i]$表示点$i$从所在环点$x$（深度最小）开始逆时针的距离，最终$s[x]$记为$s[N]$后$s[x]=0$。另外注意要记录一下环中点的编号顺序。</p><p>3.LCA：圆点直接计算，方点中$dis(A,B)=\min \lbrace s[A]+s[w]-s[B] , s[B]-s[A] \rbrace$（$A$在$B$的顺时针方向，否则交换$AB$）。</p><p>4.注意防止访问父亲的边是$i\oplus 1$，初始$tot=1$。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">20010</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span>fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dfsnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>deep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>ll s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> tu<span class="token punctuation">{</span>    <span class="token keyword">int</span> first<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token punctuation">;</span>    <span class="token keyword">struct</span> edge<span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>from<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>        tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token operator">=</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>        tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>u<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token operator">=</span>first<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>first<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>G<span class="token punctuation">;</span><span class="token keyword">int</span> first<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>from<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token operator">=</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>u<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span>e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token operator">=</span>first<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>first<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>    N<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pre<span class="token operator">=</span>w<span class="token punctuation">,</span>ID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">;</span>i<span class="token operator">!=</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">=</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">;</span>        pre<span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ID<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">;</span>i<span class="token operator">!=</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">=</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> father<span class="token punctuation">)</span><span class="token punctuation">{</span>    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>dfsnum<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>G<span class="token punctuation">.</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>G<span class="token punctuation">.</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token operator">&amp;&amp;</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> father<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token operator">&lt;=</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        deep<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        dis<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>deep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token operator">=</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>deep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token operator">&lt;=</span>d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token operator">&lt;=</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A<span class="token operator">=</span>x<span class="token punctuation">;</span>B<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> Q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    G<span class="token punctuation">.</span>tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    N<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token operator">=</span><span class="token function">lca</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>dis<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            ll ans<span class="token operator">=</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">-</span>dis<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">-</span>dis<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">&lt;</span>id<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="点双"><a href="#点双" class="headerlink" title="点双"></a>点双</h2><p>对于无向连通图，对每个点双建立一个方点连向其中所有点并消除点双内部的连边，这样就是广义圆方树。</p><p>例如经典的旅行问题：询问带点权无向图中，两点间所有简单路径的最小权值。</p><p>两点间的简单路径并=两点间的唯一点双链。（如果存在一条其它路径到达，则与已有点双矛盾。）</p><p>所以建立广义圆方树后就是查询树链最小值的问题了。（每个方点的权=连接圆点的最小权）</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/onioncyc/p/8315835.html" target="_blank" rel="noopener">【算法专题】仙人掌图问题</a></li><li><a href="https://blog.csdn.net/zhangche0526/article/details/71879985" target="_blank" rel="noopener">仙人掌相关问题的处理方法（未完待续）</a></li><li><a href="https://download.csdn.net/download/simpsonk/10172077" target="_blank" rel="noopener">WC2017-immortalCO Making Graph into Trees</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OI/ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/02/hello-world/"/>
      <url>/2018/11/02/hello-world/</url>
      
        <content type="html"><![CDATA[<pre class=" language-C++"><code class="language-C++">#include <stdio.h>int main(){    printf("Hello, World!\n");    return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
